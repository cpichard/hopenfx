-- GENERATED by C->Haskell Compiler, version 0.16.3 Crystal Seed, 24 Jan 2009 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "OfxCore.chs" #-}{-# LANGUAGE ForeignFunctionInterface, DeriveDataTypeable, TypeSynonymInstances  #-}
{-# LANGUAGE CPP #-}
module OfxCore where

import C2HS
import System.IO.Unsafe
import Foreign
import Foreign.C
import Foreign.C.String
import Foreign.Storable
import Foreign.Ptr
import Control.Monad
import Control.Applicative
import Data.Typeable



{-# LINE 19 "OfxCore.chs" #-}

type HOfxHostPtr = Ptr (HOfxHost)
{-# LINE 21 "OfxCore.chs" #-}

-- |
data HOfxHost =
  HOfxHost
    { host :: Ptr ()
    , fetchSuite :: FunPtr (Ptr () -> CString -> CInt -> IO (Ptr ()))
    }

-- type OfxPlugin = {#type OfxPlugin #}
type HOfxPluginPtr = Ptr (HOfxPlugin)
{-# LINE 31 "OfxCore.chs" #-}

instance Storable HOfxHost where
  sizeOf _ = 16
{-# LINE 34 "OfxCore.chs" #-}
  alignment _ = 4
  peek p =
    HOfxHost
      <$> ((\ptr -> do {peekByteOff ptr 0 ::IO (Ptr ())}) p)
      <*> ((\ptr -> do {peekByteOff ptr 8 ::IO (FunPtr ((Ptr ()) -> ((Ptr CChar) -> (CInt -> (IO (Ptr ()))))))})p)
  poke p x = do
    (\ptr val -> do {pokeByteOff ptr 0 (val::(Ptr ()))}) p (host x)
    (\ptr val -> do {pokeByteOff ptr 8 (val::(FunPtr ((Ptr ()) -> ((Ptr CChar) -> (CInt -> (IO (Ptr ())))))))}) p (fetchSuite x)

-- | Simplifying the types of args for the main entry functions
type MainEntryArgs = CString -> Ptr () -> Ptr () -> Ptr ()

data HOfxPlugin =
  HOfxPlugin
    { pluginApi :: !CString
    , apiVersion :: !CInt
    , pluginIdentifier :: !CString
    , pluginVersionMajor :: !CInt
    , pluginVersionMinor :: !CInt
    , setHost :: FunPtr (HOfxHostPtr -> IO ())
    , mainEntry :: FunPtr (CString -> Ptr () -> Ptr () -> Ptr () -> IO CInt)
    } deriving (Show, Typeable)

instance Storable HOfxPlugin where
    sizeOf _ = 48
{-# LINE 59 "OfxCore.chs" #-}
    alignment _ = 4
    peek p =
      HOfxPlugin
          <$> (\ptr -> do {peekByteOff ptr 0 ::IO (Ptr CChar)}) p
          <*> liftM cIntConv ((\ptr -> do {peekByteOff ptr 8 ::IO CInt}) p)
          <*> ((\ptr -> do {peekByteOff ptr 16 ::IO (Ptr CChar)}) p)
          <*> liftM cIntConv ((\ptr -> do {peekByteOff ptr 24 ::IO CUInt}) p)
          <*> liftM cIntConv ((\ptr -> do {peekByteOff ptr 28 ::IO CUInt}) p)
          <*> (\ptr -> do {peekByteOff ptr 32 ::IO (FunPtr ((HOfxHostPtr) -> (IO ())))}) p
          <*> (\ptr -> do {peekByteOff ptr 40 ::IO (FunPtr ((Ptr CChar) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt))))))}) p
    poke p x = do
      (\ptr val -> do {pokeByteOff ptr 0 (val::(Ptr CChar))}) p (pluginApi x)
      (\ptr val -> do {pokeByteOff ptr 8 (val::CInt)}) p (cIntConv $ apiVersion x)
      (\ptr val -> do {pokeByteOff ptr 16 (val::(Ptr CChar))}) p (pluginIdentifier x)
      (\ptr val -> do {pokeByteOff ptr 24 (val::CUInt)}) p (cIntConv $ pluginVersionMajor x)
      (\ptr val -> do {pokeByteOff ptr 28 (val::CUInt)}) p (cIntConv $ pluginVersionMinor x)
      (\ptr val -> do {pokeByteOff ptr 32 (val::(FunPtr ((HOfxHostPtr) -> (IO ()))))}) p (setHost x)
      (\ptr val -> do {pokeByteOff ptr 40 (val::(FunPtr ((Ptr CChar) -> ((Ptr ()) -> ((Ptr ()) -> ((Ptr ()) -> (IO CInt)))))))}) p (mainEntry x)


